classdef Nucleus_Model <SimuCell_Object_Model
  %Nucleus_Model nucleus model plugin creating an elliptical nucleus shape.
  %The model for the shape itself is a variation on the one used by 
  % Lehmussola et al in Proceedings of the IEEE, Vol. 96, No. 8. 
  % (16 July 2008), pp. 1348-1360, doi:10.1109/JPROC.2008.925490
  %
  %Nucleus_Model Properties:
  %   radius - Average Nuclear Radius
  %     Default value : 15
  %     Range value : 1 to Inf
  %   eccentricity - Measure of Non-Uniformity: 0=spherical, 1=straight line
  %     Default value : 0.5
  %     Range value : 0 to 1
  %   randomness - Measure of Non-Uniformity: 0=elliptical, 1=random
  %     Default value : 0.1
  %     Range value : 0 to 1
  %
  %Usage:
  %%Create a new Object 'nucleus'
  %add_object(subpop{2},'nucleus');
  %
  %%Set the Nucleus_Model model
  %subpop{2}.objects.nucleus.model=Nucleus_Model;
  %
  %Set the parameters
  %set(subpop{2}.objects.nucleus.model,'radius',60);
  %set(subpop{2}.objects.nucleus.model,'eccentricity',0.6);
  %set(subpop{2}.objects.nucleus.model,'randomness',0.2);
  %
  %
  % ------------------------------------------------------------------------------
  % Copyright Â©2012, The University of Texas Southwestern Medical Center 
  % Authors:
  % Satwik Rajaram and Benjamin Pavie for the Altschuler and Wu Lab
  % For latest updates, check: < http://www.SimuCell.org >.
  %
  % All rights reserved.
  % This program is free software: you can redistribute it and/or modify
  % it under the terms of the GNU General Public License as published by
  % the Free Software Foundation, version 3 of the License.
  %
  % This program is distributed in the hope that it will be useful,
  % but WITHOUT ANY WARRANTY; without even the implied warranty of
  % MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  % GNU General Public License for more details:
  % < http://www.gnu.org/licenses/ >.
  %
  % ------------------------------------------------------------------------------
  %%

    
  
  properties
    radius;
    eccentricity;
    randomness;
    description='An Elliptical Model of Nucleus';
  end
  
  
  methods
    %The constructor needs to have the definitions of all the Parameter
    %variables declared as properties.
    %Initial pre-processing, that one does not wish to repeat every time
    %the shape is generated can also be performed here, potentially using
    %a listener to make sure that all the Parameter variables have been set
    %(see SLML_Nucleus_Model).
    function obj=Nucleus_Model()
      obj.radius=Parameter('Nuclear Radius',15,SimuCell_Class_Type.number,...
        [0,Inf],'Average Nuclear Radius');
      obj.eccentricity=Parameter('Nuclear Eccentricity',0.5,...
        SimuCell_Class_Type.number,...
        [0,1],'Measure of Non-Uniformity: 0=spherical, 1=straight line');
      obj.randomness=Parameter('Extent of Variation',0.1,...
        SimuCell_Class_Type.number,...
        [0,1],'Measure of Non-Uniformity: 0=elliptical,1= random');
    end
    
    % The output_shape function needs to generate output_shape, a binary 
    % mask (size of the output image).
    % of the shape being generated. This function is called by the engine
    % and will always have the same parameters passed to it:
    % pos - a 1x2 matrix, containing the x and y position generated by the 
    % placement function.
    % current_image_mask - a binary  mask of the same size as the final 
    % image showing the cells that have already been rendered.
    % prerendered_shapes - a cell array containing the shapes required 
    % (as specified in the prerendered_object_list). Each shape is 
    % described by binary mask of the same size as the final image and the 
    % masks are in the same order as specified in prerendered_object_list.
    % It is up to the person writing a plugin which part of this
    % information they want to use.
    function output_shape=make_shape(obj,pos,current_image_mask,prerendered_shapes)
      x=pos(1);y=pos(2);
      intermediate_shape=elliptical_shape(obj.radius.value,...
        obj.eccentricity.value,obj.randomness.value);
      output_shape=false(size(current_image_mask));
      shape_size=size(intermediate_shape);
      output_shape(x-floor(shape_size(1)/2-0.5):x-floor(shape_size(1)/2-0.5)+shape_size(1)-1,...
        y-floor(shape_size(2)/2-0.5):y-floor(shape_size(2)/2-0.5)+shape_size(2)-1)=logical(intermediate_shape);
    end
    
    % This function contains the list of shapes (within the cell being
    % rendered), specified as a cell array, that is required to render the 
    % present shape using theoutput_shape function.  The cell elements are 
    % of type SimuCell_Object, and should be passed to the function by a 
    % user through one of the Parameters.
    function pre_obj_list=prerendered_object_list(obj)
      pre_obj_list=cell(0);
    end
    
  end
  
  
end
